name: DB Backup (mysqldump + email)

on:
  schedule:
    # Corre cada hora los lunes (UTC). Guard abajo asegura 14:00 en Chile (DST automático).
    - cron: "0 * * * 1"
  workflow_dispatch: {}

jobs:
  backup:
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: core.settings
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: ${{ github.workspace }}
      BACKUP_DIR: ${{ github.workspace }}/backups

      # Django / settings.py (decouple)
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}

      # Email
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}           
      EMAIL_PORT: ${{ secrets.EMAIL_PORT }}           
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }} 
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}  

      # mysqldump (si tu management command las usa)
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Guard: continuar solo si en Chile es lunes 14:00
      - name: Verificar hora Chile (14:00)
        id: guard
        shell: bash
        run: |
          export TZ=America/Santiago
          echo "Ahora en Chile: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          DOW=$(date +%u)   # 1 = lunes
          HOUR=$(date +%H)  # 00-23
          if [ "$DOW" = "1" ] && [ "$HOUR" = "14" ]; then
            echo "run=true" >> "$GITHUB_OUTPUT"
          else
            echo "run=false" >> "$GITHUB_OUTPUT"
          fi

      # Paso de salida limpia cuando NO es lunes 14:00 (evita marcas rojas)
      - name: Fuera de horario — terminar en verde
        if: steps.guard.outputs.run != 'true'
        run: echo "No es lunes 14:00 CL. Fin sin ejecutar backup."

      - name: Set up Python
        if: steps.guard.outputs.run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system deps (mysql-client)
        if: steps.guard.outputs.run == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Install Python deps
        if: steps.guard.outputs.run == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare backup dir
        if: steps.guard.outputs.run == 'true'
        run: mkdir -p "$BACKUP_DIR"

      - name: Run Django backup command
        if: steps.guard.outputs.run == 'true'
        run: python manage.py backup_db

      - name: Locate newest backup file
        if: steps.guard.outputs.run == 'true'
        id: find_backup
        shell: bash
        run: |
          set -e
          FILE=$(ls -1t "$BACKUP_DIR" | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "No backup file found in $BACKUP_DIR" >&2
            exit 1
          fi
          echo "path=$BACKUP_DIR/$FILE" >> "$GITHUB_OUTPUT"
          echo "Found: $BACKUP_DIR/$FILE"

      - name: Enviar respaldo por correo (mensaje formal)
        if: steps.guard.outputs.run == 'true'
        env:
          BACKUP_FILE: ${{ steps.find_backup.outputs.path }}
        run: |
          python - <<'PY'
          import os, ssl, smtplib, mimetypes, datetime
          from email.message import EmailMessage

          path = os.environ["BACKUP_FILE"]
          sender = os.environ["EMAIL_HOST_USER"]
          recipients = [r.strip() for r in os.environ["EMAIL_RECIPIENTS"].split(",") if r.strip()]
          if not recipients:
            raise SystemExit("ERROR: EMAIL_RECIPIENTS vacío")

          host = os.environ["EMAIL_HOST"]
          port = int(os.environ["EMAIL_PORT"])

          now_cl = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

          subject = f"Respaldo automático de base de datos – {now_cl}"
          body = f"""Estimado/a,

Por medio del presente, se informa que el procedimiento de respaldo automático de la base de datos se ha ejecutado satisfactoriamente.

• Fecha y hora (Chile): {now_cl}
• Archivo generado: {os.path.basename(path)}

Se adjunta el archivo de respaldo para su custodia y control. 
Ante cualquier observación o eventualidad, agradeceremos su notificación para la revisión correspondiente.

Atentamente,
Sistema de Respaldo – GitHub Actions
"""

          from email.utils import make_msgid
          msg = EmailMessage()
          msg["Subject"] = subject
          msg["From"] = sender
          msg["To"] = ", ".join(recipients)
          msg["Message-ID"] = make_msgid()
          msg.set_content(body)

          ctype, _ = mimetypes.guess_type(path)
          if ctype is None:
            ctype = "application/octet-stream"
          maintype, subtype = ctype.split("/", 1)
          with open(path, "rb") as f:
            msg.add_attachment(f.read(), maintype=maintype, subtype=subtype, filename=os.path.basename(path))

          ctx = ssl.create_default_context()
          try:
            with smtplib.SMTP_SSL(host, port, context=ctx, timeout=30) as s:
              s.login(os.environ["EMAIL_HOST_USER"], os.environ["EMAIL_HOST_PASSWORD"])
              resp = s.send_message(msg)
              mode = "SSL"
          except Exception:
            with smtplib.SMTP(host, port, timeout=30) as s:
              s.ehlo()
              s.starttls(context=ctx)
              s.ehlo()
              s.login(os.environ["EMAIL_HOST_USER"], os.environ["EMAIL_HOST_PASSWORD"])
              resp = s.send_message(msg)
              mode = "STARTTLS"

          if resp:
            raise SystemExit(f"ERROR: SMTP no entregó a: {resp}")
          print(f"SMTP OK ({mode}): enviado a {recipients} con adjunto {os.path.basename(path)}")
          PY

      - name: Upload artifact (copia de seguridad)
        if: steps.guard.outputs.run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: mysql-backup
          path: ${{ env.BACKUP_DIR }}/*
          if-no-files-found: error
